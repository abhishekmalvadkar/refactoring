1. People are not utilising Refactoring as many ways they could
2. Most of time people are talking about Refactoreing for cycle of red -> green -> refactor with respect to TDD
3. Suppose I want to add one Functionality so that's why first I will add failing test and in the starting it will fail and after that I will write production code and make it pass and after that I will refactor my production code to make it more clean , readable and simple and good design code.
4. When you Refactoring then you should have test which you are running regularly so while Refactoring if you will do any mistake so these test suite will prevent you.
5. You are working in different mode of programming like
- Writing test mode
- adding feature mode means writing production mode
- Refactoring code mode
- you should work on one mode at a time, suppose while Refactoring if you found a bug then switch to adding feature mode fix it and after that come back to Refactoring mode.
6. Others moded are Performance mode where you are focused on making your code Faster instead of make it clear so be consiuance in which mode you are and focus on one mode at a time.
7. Refactoring means you are creating good and clean and Simple design without changing the behaviour of code.
8. When you are refactoring then always think like
- I will not change the behaviour of code
- I will take small small steps to refactor code
- And I will run test after every change of refactoring
- If I make mistakes then I will undo the code that I have did if test fails due to my change and after that I will try another design code
9. This is one of the workflow of refactoring which is nothing but TDD Refactoring and this is the most common workflow of Refactoring where you are following Red -> Green -> Refactor cycle
10. Let's look at the other potential cases
11. Sometimes you are reading some existing code and you feel that awww this is bad code (Yuk) , it is doing this thing in in efficient way and after sometime you realize that the author of that code is you.
12. In my younger days we heard that if code is working then don't change/touch it and if you touch it then it might break.
13. Refactoring mindset says when you see something yucky you actually should go and fix it , you should be like I see a mess so I immediately need to do something to make it cleaner or clear, 
14. It seems fine before 2 months when you or someone written it but now you realize it's not looking fine that's why need to make it clean
15. I think this is very oportunuctics way of refactoring
16. Sometimes this is called as little pickup Refactoring here you you cleaning up existing things which are writing by you or someone else while reading existing codebase
17. Sometimes this type of Refactoring is expressed as Boys Scoute rule which is "Always leave something cleaner than it was before"
18. It's not like that you got sometimes mess and you need to refactoring or doing cleaning completely, No , there is judgement should be that how much Refactoring is appropriate.
19. Always try to make it at least better , means take some baby steps to make it at least better compare to previous one.
20. At least do small improvements
21. And when you read that code after some days then also do some improvements if you see any that is called continues refactoring to make your system well crafted.
22. And if something that you don't read or hit often to full fill change request then don't need to Refactore that code.
23. Another case or version of Refactoring is suppose your are reading some code and you feel like I don't understand anything in this code and you take some time and read more that code and after long time you understand that ohhh this thing is working like this and that thing is in your mind which you can forget after some days and that thing is not in your team members mind so in this case what you should do that whatever understanding is there in your mind based on that refactor that code and make it little bit understandable so now that thing is not only in your mind but that thing is also in that code so anyone or you after some days or next time will read that code so it will be understandable , this type of Refactoring is called as comprehension Refactoring.
24. Litter picker and comprehension Refactoring is like same
25. Let's talk about reaction should be while you see not understandable code or yucky code as a developer
- when you see code which is not understandable or yucky code then first question you have to ask yourself that do I need to refactor this right now or not ? Because in that time you might be in some bug fix or adding new feature or in some other Refactoring so what you should do if it's minor Refactoring then you should do it right now for example just renaming a method or variable to make it readable.
- suppose if you are working on adding feature and you are in red state means your are having some failing test and at that time if you find something yucky which can be refactor by taking Little efforts then what you should do is first come in green State by disabling your failing test in which you are working currently to add feature and after that do Refactoring and check is all tetsts are green if yes then go ahed and re- eanble your failing test and continue your adding feature task.
- and if you can't refactor that yucky code right now because it can take more efforts which might me impact your current task so what you should do is write a note that I need to refactor this yucky code after finishing my current task so after finishing your current adding feature task go and refactor that code and do some cleanup.
26. It is so important that you should treat Refactoring as an integral part of your regular work, as soon as Refactoring become separate task then it becomes a big discussion and big arguments that how it should be done.
27. That's why make sure that you will do appropriate amount of Refactoring during your regular work
