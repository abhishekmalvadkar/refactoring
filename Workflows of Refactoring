1. People are not utilising Refactoring as many ways they could
2. Most of time people are talking about Refactoreing for cycle of red -> green -> refactor with respect to TDD
3. Suppose I want to add one Functionality so that's why first I will add failing test and in the starting it will fail and after that I will write production code and make it pass and after that I will refactor my production code to make it more clean , readable and simple and good design code.
4. When you Refactoring then you should have test which you are running regularly so while Refactoring if you will do any mistake so these test suite will prevent you.
5. You are working in different mode of programming like
- Writing test mode
- adding feature mode means writing production mode
- Refactoring code mode
- you should work on one mode at a time, suppose while Refactoring if you found a bug then switch to adding feature mode fix it and after that come back to Refactoring mode.
6. Others moded are Performance mode where you are focused on making your code Faster instead of make it clear so be consiuance in which mode you are and focus on one mode at a time.
7. Refactoring means you are creating good and clean and Simple design without changing the behaviour of code.
8. When you are refactoring then always think like
- I will not change the behaviour of code
- I will take small small steps to refactor code
- And I will run test after every change of refactoring
- If I make mistakes then I will undo the code that I have did if test fails due to my change and after that I will try another design code
9. This is one of the workflow of refactoring which is nothing but TDD Refactoring and this is the most common workflow of Refactoring where you are following Red -> Green -> Refactor cycle
10. Let's look at the other potential cases
11. Sometimes you are reading some existing code and you feel that awww this is bad code (Yuk) , it is doing this thing in in efficient way and after sometime you realize that the author of that code is you.
12. In my younger days we heard that if code is working then don't change/touch it and if you touch it then it might break.
13. Refactoring mindset says when you see something yucky you actually should go and fix it , you should be like I see a mess so I immediately need to do something to make it cleaner or clear, 
14. It seems fine before 2 months when you or someone written it but now you realize it's not looking fine that's why need to make it clean
15. I think this is very oportunuctics way of refactoring
16. Sometimes this is called as little pickup Refactoring here you you cleaning up existing things which are writing by you or someone else while reading existing codebase
17. Sometimes this type of Refactoring is expressed as Boys Scoute rule which is "Always leave something cleaner than it was before"
